.TH LVCREATE 8 "LVM TOOLS #VERSION#" "Red Hat, Inc."
.
.ie t \{\
.\" PostScript/PDF with tabs
. ds TT \t
. ds DTT \t\t
.\}
.el \{\
. ds TT \&
. ds DTT \0\0\0
.\}
.
.de OPT
.ie \\n(.$>1 \\*[TT]\fB-\\$1\fP|\\*[TT]\fB--\\$2\fP\c
.el \\*[DTT]\fB--\\$1\fP\c
..
.
.de OPA
.OPT \\$*
\ \c
..
.de OPS
.OPT \\$*
\&
..
.
.
.\"List of all options as O_string.
.
.de O_activate
.OPA a activate
\fBy\fP|\fBn\fP|\fBay\fP
..
.de O_addtag
.OPA addtag
\fITag\fP
..
.de O_alloc
.OPA alloc
\%\fBcontiguous\fP|\:\
\fBcling\fP|\:\
\fBcling_by_tags\fP|\:\
\fBnormal\fP|\:\
\fBanywhere\fP|\:\
\fBinherit\fP
..
.de O_autobackup
.OPA A autobackup
\fBy\fP|\fBn\fP
..
.de O_cache
.OPS H cache
..
.de O_cachedevice
.OPA cachedevice
\fIPV\fP
..
.de O_cachemetadataformat
.OPA cachemetadataformat
\fBauto\fP|\fB1\fP|\fB2\fP
..
.de O_cachemode
.OPA cachemode
\%\fBwritethrough\fP|\:\
\fBwriteback\fP|\:\
\fBpassthrough\fP
..
.de O_cachepolicy
.OPA cachepolicy
\fIString\fP
..
.de O_cachepool
.OPA cachepool
\fILV\fP
..
.de O_cachesettings
.OPA cachesettings
\fIString\fP
..
.de O_cachesize
.OPA cachesize
\fISize\fP[m|\:UNIT]
..
.de O_cachevol
.OPA cachevol
\fILV\fP
..
.de O_chunksize
.OPA c chunksize
\fISize\fP[k|\:UNIT]
..
.de O_commandprofile
.OPA commandprofile
\fIString\fP
..
.de O_compression
.OPA compression
\fBy\fP|\fBn\fP
..
.de O_config
.OPA config
\fIString\fP
..
.de O_contiguous
.OPA C contiguous
\fBy\fP|\fBn\fP
..
.de O_debug
.OPA d debug
\&\.\|.\|.\&
..
.de O_deduplication
.OPA deduplication
\fBy\fP|\fBn\fP
..
.de O_devices
.OPA devices
\fIPV\fP
..
.de O_devicesfile
.OPA devicesfile
\fIString\fP
..
.de O_discards
.OPA discards
\%\fBpassdown\fP|\:\
\fBnopassdown\fP|\:\
\fBignore\fP
..
.de O_driverloaded
.OPA driverloaded
\fBy\fP|\fBn\fP
..
.de O_errorwhenfull
.OPA errorwhenfull
\fBy\fP|\fBn\fP
..
.de O_extents
.OPA l extents
\fINumber\fP[PERCENT]
..
.de O_help
.OPS h help
..
.de O_ignoreactivationskip
.OPS K ignoreactivationskip
..
.de O_ignoremonitoring
.OPS ignoremonitoring
..
.de O_integritysettings
.OPA integritysettings
\fIString\fP
..
.de O_journal
.OPA journal
\fIString\fP
..
.de O_lockopt
.OPA lockopt
\fIString\fP
..
.de O_longhelp
.OPS longhelp
..
.de O_major
.OPA j major
\fINumber\fP
..
.de O_maxrecoveryrate
.OPA \fP[\fBraid\fP]\fBmaxrecoveryrate
\fISize\fP[k|\:UNIT]
..
.de O_metadataprofile
.OPA metadataprofile
\fIString\fP
..
.de O_minor
.OPA minor
\fINumber\fP
..
.de O_minrecoveryrate
.OPA \fP[\fBraid\fP]\fBminrecoveryrate
\fISize\fP[k|\:UNIT]
..
.de O_mirrorlog
.OPA mirrorlog
\fBcore\fP|\fBdisk\fP
..
.de O_mirrors
.OPA m mirrors
\fINumber\fP
..
.de O_monitor
.OPA monitor
\fBy\fP|\fBn\fP
..
.de O_name
.OPA n name
\fIString\fP
..
.de O_nohints
.OPS nohints
..
.de O_nolocking
.OPS nolocking
..
.de O_nosync
.OPS nosync
..
.de O_noudevsync
.OPS noudevsync
..
.de O_permission
.OPA p permission
\fBrw\fP|\fBr\fP
..
.de O_persistent
.OPA M persistent
\fBy\fP|\fBn\fP
..
.de O_pooldatavdo
.OPA pooldatavdo
\fBy\fP|\fBn\fP
..
.de O_poolmetadatasize
.OPA poolmetadatasize
\fISize\fP[m|\:UNIT]
..
.de O_poolmetadataspare
.OPA poolmetadataspare
\fBy\fP|\fBn\fP
..
.de O_profile
.OPA profile
\fIString\fP
..
.de O_quiet
.OPA q quiet
\&\.\|.\|.\&
..
.de O_raidintegrity
.OPA raidintegrity
\fBy\fP|\fBn\fP
..
.de O_raidintegrityblocksize
.OPA raidintegrityblocksize
\fINumber\fP
..
.de O_raidintegritymode
.OPA raidintegritymode
\fIString\fP
..
.de O_readahead
.OPA r readahead
\%\fBauto\fP|\:\
\fBnone\fP|\:\
\fINumber\fP
..
.de O_regionsize
.OPA R regionsize
\fISize\fP[m|\:UNIT]
..
.de O_reportformat
.OPA reportformat
\%\fBbasic\fP|\:\
\fBjson\fP|\:\
\fBjson_std\fP
..
.de O_setactivationskip
.OPA k setactivationskip
\fBy\fP|\fBn\fP
..
.de O_setautoactivation
.OPA setautoactivation
\fBy\fP|\fBn\fP
..
.de O_size
.OPA L size
\fISize\fP[m|\:UNIT]
..
.de O_snapshot
.OPS s snapshot
..
.de O_stripes
.OPA i stripes
\fINumber\fP
..
.de O_stripesize
.OPA I stripesize
\fISize\fP[k|\:UNIT]
..
.de O_test
.OPS t test
..
.de O_thin
.OPS T thin
..
.de O_thinpool
.OPA thinpool
\fILV\fP
..
.de O_type
.OPA type
\%\fBlinear\fP|\:\
\fBstriped\fP|\:\
\fBsnapshot\fP|\:\
\fBraid\fP|\:\
\fBmirror\fP|\:\
\fBthin\fP|\:\
\fBthin-pool\fP|\:\
\fBvdo\fP|\:\
\fBvdo-pool\fP|\:\
\fBcache\fP|\:\
\fBcache-pool\fP|\:\
\fBwritecache\fP
..
.de O_vdo
.OPS vdo
..
.de O_vdopool
.OPA vdopool
\fILV\fP
..
.de O_vdosettings
.OPA vdosettings
\fIString\fP
..
.de O_verbose
.OPA v verbose
\&\.\|.\|.\&
..
.de O_version
.OPS version
..
.de O_virtualsize
.OPA V virtualsize
\fISize\fP[m|\:UNIT]
..
.de O_wipesignatures
.OPA W wipesignatures
\fBy\fP|\fBn\fP
..
.de O_yes
.OPS y yes
..
.de O_zero
.OPA Z zero
\fBy\fP|\fBn\fP
..
.
.SH NAME
.
lvcreate \(em Create a logical volume
.
.SH SYNOPSIS
.
.nh
.TP
\fBlvcreate\fP \fIoption_args\fP \fIposition_args\fP
[ \fIoption_args\fP ]
.br
[ \fIposition_args\fP ]
.P
.na
.RS 5
.if t .ta 3nR +1uL \" PostScript/PDF
.PD 0
.O_activate
.br
.O_addtag
.br
.O_alloc
.br
.O_autobackup
.br
.O_cache
.br
.O_cachedevice
.br
.O_cachemetadataformat
.br
.O_cachemode
.br
.O_cachepolicy
.br
.O_cachepool
.br
.O_cachesettings
.br
.O_cachesize
.br
.O_cachevol
.br
.O_chunksize
.br
.O_commandprofile
.br
.O_compression
.br
.O_config
.br
.O_contiguous
.br
.O_debug
.br
.O_deduplication
.br
.O_devices
.br
.O_devicesfile
.br
.O_discards
.br
.O_driverloaded
.br
.O_errorwhenfull
.br
.O_extents
.br
.O_help
.br
.O_ignoreactivationskip
.br
.O_ignoremonitoring
.br
.O_integritysettings
.br
.O_journal
.br
.O_lockopt
.br
.O_longhelp
.br
.O_major
.br
.O_maxrecoveryrate
.br
.O_metadataprofile
.br
.O_minor
.br
.O_minrecoveryrate
.br
.O_mirrorlog
.br
.O_mirrors
.br
.O_monitor
.br
.O_name
.br
.O_nohints
.br
.O_nolocking
.br
.O_nosync
.br
.O_noudevsync
.br
.O_permission
.br
.O_persistent
.br
.O_pooldatavdo
.br
.O_poolmetadatasize
.br
.O_poolmetadataspare
.br
.O_profile
.br
.O_quiet
.br
.O_raidintegrity
.br
.O_raidintegrityblocksize
.br
.O_raidintegritymode
.br
.O_readahead
.br
.O_regionsize
.br
.O_reportformat
.br
.O_setactivationskip
.br
.O_setautoactivation
.br
.O_size
.br
.O_snapshot
.br
.O_stripes
.br
.O_stripesize
.br
.O_test
.br
.O_thin
.br
.O_thinpool
.br
.O_type
.br
.O_vdo
.br
.O_vdopool
.br
.O_vdosettings
.br
.O_verbose
.br
.O_version
.br
.O_virtualsize
.br
.O_wipesignatures
.br
.O_yes
.br
.O_zero
.PD
.if t .ta
.RE
.ad
.hy
.
.ds TT \&
.ds DTT \&
.
.
.SH DESCRIPTION
.
lvcreate creates a new LV in a VG. For standard LVs, this requires
allocating logical extents from the VG's free physical extents. If there
is not enough free space, the VG can be extended with other PVs
(\fBvgextend\fP(8)), or existing LVs can be reduced or removed
(\fBlvremove\fP(8), \fBlvreduce\fP(8)).
.P
To control which PVs a new LV will use, specify one or more PVs as
position args at the end of the command line. lvcreate will allocate
physical extents only from the specified PVs.
.P
lvcreate can also create snapshots of existing LVs, e.g. for backup
purposes. The data in a new snapshot LV represents the content of the
original LV from the time the snapshot was created.
.P
RAID LVs can be created by specifying an LV type when creating the LV (see
\fBlvmraid\fP(7)). Different RAID levels require different numbers of
unique PVs be available in the VG for allocation.
.P
Thin pools (for thin provisioning) and cache pools (for caching) are
represented by special LVs with types thin-pool and cache-pool (see
\fBlvmthin\fP(7) and \fBlvmcache\fP(7)). The pool LVs are not usable as
standard block devices, but the LV names act as references to the pools.
.P
Thin LVs are thinly provisioned from a thin pool, and are created with a
virtual size rather than a physical size. A cache LV is the combination of
a standard LV with a cache pool, used to cache active portions of the LV
to improve performance.
.P
VDO LVs are also provisioned volumes from a VDO pool, and are created with a
virtual size rather than a physical size (see \fBlvmvdo\fP(7)).
.
.SS Usage notes
.
In the usage section below, \fB--size\fP \fISize\fP can be replaced
with \fB--extents\fP \fINumber\fP. See descriptions in the options section.
.P
In the usage section below, \fB--name\fP is omitted from the required
options, even though it is typically used. When the name is not
specified, a new LV name is generated with the "lvol" prefix and a unique
numeric suffix.
.P
In the usage section below, when creating a pool and the name is omitted
the new LV pool name is generated with the
"vpool" prefix for vdo-pools and a unique numeric suffix.
.P
Pool name can be specified together with \fIVG\fP name i.e.:
vg00/mythinpool.
.
.SH USAGE
.
.nh
.na
Create a linear LV.
.P
.B lvcreate
.O_size
\fIVG\fP
.RS
[ \fB--type linear\fP ] (implied)
.br
[
.O_extents
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a striped LV.
.P
.B lvcreate
.O_stripes
.O_size
\fIVG\fP
.RS
[ \fB--type striped\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_stripesize
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a raid1 or mirror LV.
Implicit type is defined by lvm.conf global/mirror_segtype_default.
.P
.B lvcreate
.O_size
.O_mirrors
\fIVG\fP
.RS
[ \fB--type raid1\fP|\fBmirror\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_stripesize
]
.br
[
.O_regionsize
]
.br
[
.O_integritysettings
]
.br
[
.O_maxrecoveryrate
]
.br
[
.O_minrecoveryrate
]
.br
[
.O_mirrorlog
]
.br
[
.O_raidintegrity
]
.br
[
.O_raidintegrityblocksize
]
.br
[
.O_raidintegritymode
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a raid LV (a specific raid level must be used, e.g. raid1).
.P
.B lvcreate
\fB--type\fP \fBraid\fP
.O_size
\fIVG\fP
.RS
[
.O_extents
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_mirrors
]
.br
[
.O_regionsize
]
.br
[
.O_integritysettings
]
.br
[
.O_maxrecoveryrate
]
.br
[
.O_minrecoveryrate
]
.br
[
.O_raidintegrity
]
.br
[
.O_raidintegrityblocksize
]
.br
[
.O_raidintegritymode
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a raid10 LV.
.P
.B lvcreate
.O_stripes
.O_size
.RS
\ \&
.O_mirrors
\fIVG\fP
.br
[ \fB--type raid10\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_stripesize
]
.br
[
.O_regionsize
]
.br
[
.O_integritysettings
]
.br
[
.O_maxrecoveryrate
]
.br
[
.O_minrecoveryrate
]
.br
[
.O_raidintegrity
]
.br
[
.O_raidintegrityblocksize
]
.br
[
.O_raidintegritymode
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a COW snapshot LV of an origin LV.
.P
.B lvcreate
.O_size
.O_snapshot
\fILV\fP
.RS
[ \fB--type snapshot\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a thin pool.
.P
.B lvcreate
\fB--type\fP \fBthin-pool\fP
.O_size
\fIVG\fP
.RS
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_thin
]
.br
[
.O_compression
]
.br
[
.O_deduplication
]
.br
[
.O_discards
]
.br
[
.O_errorwhenfull
]
.br
[
.O_pooldatavdo
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[
.O_thinpool
]
.br
[
.O_vdosettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a cache pool.
.P
.B lvcreate
\fB--type\fP \fBcache-pool\fP
.O_size
\fIVG\fP
.RS
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_cache
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_cachemetadataformat
]
.br
[
.O_cachemode
]
.br
[
.O_cachepolicy
]
.br
[
.O_cachesettings
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a thin LV in a thin pool.
.P
.B lvcreate
\fB--thinpool\fP \fILV1\fP
.O_virtualsize
\fIVG\fP
.RS
[ \fB--type thin\fP ] (implied)
.br
[
.O_thin
]
.br
[ COMMON_OPTIONS ]
.sp
LV1 types:
thinpool
.RE
.
.P
\(em
.P
.
Create a thin LV that is a snapshot of an existing thin LV.
.P
.B lvcreate
.O_snapshot
\fILV1\fP
.RS
[ \fB--type thin\fP ] (implied)
.br
[ COMMON_OPTIONS ]
.sp
LV1 types:
thin
.RE
.
.P
\(em
.P
.
Create a thin LV that is a snapshot of an external origin LV.
.P
.B lvcreate
\fB--thinpool\fP \fILV1\fP
\fB--type\fP \fBthin\fP
\fILV\fP
.RS
[
.O_thin
]
.br
[ COMMON_OPTIONS ]
.sp
LV1 types:
thinpool
.RE
.
.P
\(em
.P
.
Create a LV that returns VDO when used.
.P
.B lvcreate
\fB--type\fP \fBvdo\fP
.O_size
\fIVG\fP
.RS
[
.O_extents
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_virtualsize
]
.br
[
.O_compression
]
.br
[
.O_deduplication
]
.br
[
.O_vdo
]
.br
[
.O_vdopool
]
.br
[
.O_vdosettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a new LV, then attach the specified cachepool
which converts the new LV to type cache.
.P
.B lvcreate
\fB--cachepool\fP \fILV1\fP
\fB--type\fP \fBcache\fP
.RS
\ \&
.O_size
\fIVG\fP
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_cache
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_cachemetadataformat
]
.br
[
.O_cachemode
]
.br
[
.O_cachepolicy
]
.br
[
.O_cachesettings
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.sp
LV1 types:
cachepool
.RE
.
.P
\(em
.P
.
Create a new LV, then attach the specified cachevol
which converts the new LV to type cache.
.P
.B lvcreate
.O_cachevol
\fB--type\fP \fBcache\fP
.RS
\ \&
.O_size
\fIVG\fP
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_cachemetadataformat
]
.br
[
.O_cachemode
]
.br
[
.O_cachepolicy
]
.br
[
.O_cachesettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a new LV, then attach a cachevol created from
the specified cache device, which converts the
new LV to type cache.
.P
.B lvcreate
.O_cachedevice
\fB--type\fP \fBcache\fP
.RS
\ \&
.O_size
\fIVG\fP
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_cachemetadataformat
]
.br
[
.O_cachemode
]
.br
[
.O_cachepolicy
]
.br
[
.O_cachesettings
]
.br
[
.O_cachesize
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a new LV, then attach the specified cachevol
which converts the new LV to type writecache.
.P
.B lvcreate
.O_cachevol
\fB--type\fP \fBwritecache\fP
.RS
\ \&
.O_size
\fIVG\fP
.br
[
.O_extents
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_cachesettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a new LV, then attach a cachevol created from
the specified cache device, which converts the
new LV to type writecache.
.P
.B lvcreate
.O_cachedevice
\fB--type\fP \fBwritecache\fP
.RS
\ \&
.O_size
\fIVG\fP
.br
[
.O_extents
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_cachesettings
]
.br
[
.O_cachesize
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.P
\(em
.P
Common options for command:
.RS
[
.O_activate
]
.br
[
.O_autobackup
]
.br
[
.O_contiguous
]
.br
[
.O_ignoreactivationskip
]
.br
[
.O_major
]
.br
[
.O_name
]
.br
[
.O_permission
]
.br
[
.O_persistent
]
.br
[
.O_readahead
]
.br
[
.O_setactivationskip
]
.br
[
.O_wipesignatures
]
.br
[
.O_zero
]
.br
[
.O_addtag
]
.br
[
.O_alloc
]
.br
[
.O_ignoremonitoring
]
.br
[
.O_metadataprofile
]
.br
[
.O_minor
]
.br
[
.O_monitor
]
.br
[
.O_nosync
]
.br
[
.O_noudevsync
]
.br
[
.O_reportformat
]
.br
[
.O_setautoactivation
]
.RE
.P
Common options for lvm:
.RS
[
.O_debug
]
.br
[
.O_help
]
.br
[
.O_quiet
]
.br
[
.O_test
]
.br
[
.O_verbose
]
.br
[
.O_yes
]
.br
[
.O_commandprofile
]
.br
[
.O_config
]
.br
[
.O_devices
]
.br
[
.O_devicesfile
]
.br
[
.O_driverloaded
]
.br
[
.O_journal
]
.br
[
.O_lockopt
]
.br
[
.O_longhelp
]
.br
[
.O_nohints
]
.br
[
.O_nolocking
]
.br
[
.O_profile
]
.br
[
.O_version
]
.RE
.hy
.ad
.
.SH OPTIONS
.
.TP
.O_activate
Controls the active state of the new LV.
\fBy\fP makes the LV active, or available.
New LVs are made active by default.
\fBn\fP makes the LV inactive, or unavailable, only when possible.
In some cases, creating an LV requires it to be active.
For example, COW snapshots of an active origin LV can only
be created in the active state (this does not apply to thin snapshots).
The --zero option normally requires the LV to be active.
If autoactivation \fBay\fP is used, the LV is only activated
if it matches an item in \fBlvm.conf\fP(5)
\fBactivation/auto_activation_volume_list\fP.
\fBay\fP implies --zero n and --wipesignatures n.
See \fBlvmlockd\fP(8) for more information about activation options
for shared VGs.
.
.TP
.O_addtag
Adds a tag to a PV, VG or LV. This option can be repeated to add
multiple tags at once. See \fBlvm\fP(8) for information about tags.
.
.TP
.O_alloc
Determines the allocation policy when a command needs to allocate
Physical Extents (PEs) from the VG. Each VG and LV has an allocation policy
which can be changed with vgchange/lvchange, or overridden on the
command line.
\fBnormal\fP applies common sense rules such as not placing parallel stripes
on the same PV.
\fBinherit\fP applies the VG policy to an LV.
\fBcontiguous\fP requires new PEs to be placed adjacent to existing PEs.
\fBcling\fP places new PEs on the same PV as existing PEs in the same
stripe of the LV.
If there are sufficient PEs for an allocation, but normal does not
use them, \fBanywhere\fP will use them even if it reduces performance,
e.g. by placing two stripes on the same PV.
Optional positional PV args on the command line can also be used to limit
which PVs the command will use for allocation.
See \fBlvm\fP(8) for more information about allocation.
.
.TP
.O_autobackup
Specifies if metadata should be backed up automatically after a change.
Enabling this is strongly advised!
See \fBvgcfgbackup\fP(8) for more information.
.
.TP
.O_cache
Specifies the command is handling a cache LV or cache pool.
See --type cache and --type cache-pool.
See \fBlvmcache\fP(7) for more information about LVM caching.
.
.TP
.O_cachedevice
The name of a device to use for a cache.
.
.TP
.O_cachemetadataformat
Specifies the cache metadata format used by cache target.
.
.TP
.O_cachemode
Specifies when writes to a cache LV should be considered complete.
\fBwriteback\fP considers a write complete as soon as it is
stored in the cache pool.
\fBwritethrough\fP considers a write complete only when it has
been stored in both the cache pool and on the origin LV.
While writethrough may be slower for writes, it is more
resilient if something should happen to a device associated with the
cache pool LV. With \fBpassthrough\fP, all reads are served
from the origin LV (all reads miss the cache) and all writes are
forwarded to the origin LV; additionally, write hits cause cache
block invalidates. See \fBlvmcache\fP(7) for more information.
.
.TP
.O_cachepolicy
Specifies the cache policy for a cache LV.
See \fBlvmcache\fP(7) for more information.
.
.TP
.O_cachepool
The name of a cache pool.
.
.TP
.O_cachesettings
Specifies tunable kernel options for dm-cache or dm-writecache LVs.
Use the form 'option=value' or 'option1=value option2=value', or
repeat --cachesettings for each option being set.
These settings override the default kernel behaviors which are
usually adequate. To remove cachesettings and revert to the default
kernel behaviors, use --cachesettings 'default' for dm-cache or
an empty string --cachesettings '' for dm-writecache.
See \fBlvmcache\fP(7) for more information.
.
.TP
.O_cachesize
The size of cache to use.
.
.TP
.O_cachevol
The name of a cache volume.
.
.TP
.O_chunksize
The size of chunks in a snapshot, cache pool or thin pool.
For snapshots, the value must be a power of 2 between 4 KiB and 512 KiB
and the default value is 4.
For a cache pool the value must be between 32 KiB and 1 GiB
and the default value is 64.
For a thin pool the value must be between 64 KiB and 1 GiB
and the default value starts with 64 and scales up to fit the
pool metadata size within 128 MiB, if the pool metadata size is not specified.
The value must be a multiple of 64 KiB.
See \fBlvmthin\fP(7) and \fBlvmcache\fP(7) for more information.
.
.TP
.O_commandprofile
The command profile to use for command configuration.
See \fBlvm.conf\fP(5) for more information about profiles.
.
.TP
.O_compression
Controls whether compression is enabled or disabled for VDO volume.
See \fBlvmvdo\fP(7) for more information about VDO usage.
.
.TP
.O_config
Config settings for the command. These override \fBlvm.conf\fP(5) settings.
The String arg uses the same format as \fBlvm.conf\fP(5),
or may use section/field syntax.
See \fBlvm.conf\fP(5) for more information about config.
.
.TP
.O_contiguous
Sets or resets the contiguous allocation policy for LVs.
Default is no contiguous allocation based on a next free principle.
It is only possible to change a non-contiguous allocation policy
to contiguous if all of the allocated physical extents in the LV
are already contiguous.
.
.TP
.O_debug
Set debug level. Repeat from 1 to 6 times to increase the detail of
messages sent to the log file and/or syslog (if configured).
.
.TP
.O_deduplication
Controls whether deduplication is enabled or disabled for VDO volume.
See \fBlvmvdo\fP(7) for more information about VDO usage.
.
.TP
.O_devices
Restricts the devices that are visible and accessible to the command.
Devices not listed will appear to be missing. This option can be
repeated, or accepts a comma separated list of devices. This overrides
the devices file.
.
.TP
.O_devicesfile
A file listing devices that LVM should use.
The file must exist in \fI#DEFAULT_SYS_DIR#/devices/\fP and is managed
with the \fBlvmdevices\fP(8) command.
This overrides the \fBlvm.conf\fP(5) \fBdevices/devicesfile\fP and
\fBdevices/use_devicesfile\fP settings.
.
.TP
.O_discards
Specifies how the device-mapper thin pool layer in the kernel should
handle discards.
\fBignore\fP causes the thin pool to ignore discards.
\fBnopassdown\fP causes the thin pool to process discards itself to
allow reuse of unneeded extents in the thin pool.
\fBpassdown\fP causes the thin pool to process discards itself
(like nopassdown) and pass the discards to the underlying device.
See \fBlvmthin\fP(7) for more information.
.
.TP
.O_driverloaded
If set to no, the command will not attempt to use device-mapper.
For testing and debugging.
.
.TP
.O_errorwhenfull
Specifies thin pool behavior when data space is exhausted.
When yes, device-mapper will immediately return an error
when a thin pool is full and an I/O request requires space.
When no, device-mapper will queue these I/O requests for a
period of time to allow the thin pool to be extended.
Errors are returned if no space is available after the timeout.
(Also see "\fIdm_thin_pool\fP" kernel module option no_space_timeout.)
See \fBlvmthin\fP(7) for more information.
.
.TP
.O_extents
Specifies the size of the new LV in logical extents.
The --size and --extents options are alternate methods of specifying size.
The total number of physical extents used will be
greater when redundant data is needed for RAID levels.
An alternate syntax allows the size to be determined indirectly
as a percentage of the size of a related VG, LV, or set of PVs. The
suffix \fB%VG\fP denotes the total size of the VG, the suffix \fB%FREE\fP
the remaining free space in the VG, and the suffix \fB%PVS\fP the free
space in the specified PVs.  For a snapshot, the size
can be expressed as a percentage of the total size of the origin LV
with the suffix \fB%ORIGIN\fP (\fB100%ORIGIN\fP provides space for
the whole origin).
When expressed as a percentage, the size defines an upper limit for the
number of logical extents in the new LV. The precise number of logical
extents in the new LV is not determined until the command has completed.
.
.TP
.O_help
Display help text.
.
.TP
.O_ignoreactivationskip
Ignore the "activation skip" LV flag during activation
to allow LVs with the flag set to be activated.
.
.TP
.O_ignoremonitoring
Do not interact with dmeventd unless --monitor is specified.
Do not use this if dmeventd is already monitoring a device.
.
.TP
.O_integritysettings
Specifies tunable kernel options for dm-integrity.
See \fBlvmraid\fP(7) for more information.
.
.TP
.O_journal
Record information in the systemd journal.
This information is in addition to information
enabled by the lvm.conf log/journal setting.
command: record information about the command.
output: record the default command output.
debug: record full command debugging.
.
.TP
.O_lockopt
Used to pass options for special cases to lvmlockd.
See \fBlvmlockd\fP(8) for more information.
.
.TP
.O_longhelp
Display long help text.
.
.TP
.O_major
Sets the major number of an LV block device.
.
.TP
.O_maxrecoveryrate
Sets the maximum recovery rate for a RAID LV.  The rate value
is an amount of data per second for each device in the array.
Setting the rate to 0 means it will be unbounded.
See \fBlvmraid\fP(7) for more information.
.
.TP
.O_metadataprofile
The metadata profile to use for command configuration.
See \fBlvm.conf\fP(5) for more information about profiles.
.
.TP
.O_minor
Sets the minor number of an LV block device.
.
.TP
.O_minrecoveryrate
Sets the minimum recovery rate for a RAID LV.  The rate value
is an amount of data per second for each device in the array.
Setting the rate to 0 means it will be unbounded.
See \fBlvmraid\fP(7) for more information.
.
.TP
.O_mirrorlog
Specifies the type of mirror log for LVs with the "mirror" type
(does not apply to the "raid1" type.)
\fBdisk\fP is a persistent log and requires a small amount of
storage space, usually on a separate device from the data being mirrored.
\fBcore\fP is not persistent; the log is kept only in memory.
In this case, the mirror must be synchronized (by copying LV data from
the first device to others) each time the LV is activated, e.g. after reboot.
\fBmirrored\fP is a persistent log that is itself mirrored, but
should be avoided. Instead, use the raid1 type for log redundancy.
.
.TP
.O_mirrors
Specifies the number of mirror images in addition to the original LV
image, e.g. --mirrors 1 means there are two images of the data, the
original and one mirror image.
Optional positional PV args on the command line can specify the devices
the images should be placed on.
There are two mirroring implementations: "raid1" and "mirror".
These are the names of the corresponding LV types, or "segment types".
Use the --type option to specify which to use (raid1 is default,
and mirror is legacy)
Use \fBlvm.conf\fP(5) \fBglobal/mirror_segtype_default\fP and
\fBglobal/raid10_segtype_default\fP to configure the default types.
See the --nosync option for avoiding initial image synchronization.
See \fBlvmraid\fP(7) for more information.
.
.TP
.O_monitor
Start (yes) or stop (no) monitoring an LV with dmeventd.
dmeventd monitors kernel events for an LV, and performs
automated maintenance for the LV in response to specific events.
See \fBdmeventd\fP(8) for more information.
.
.TP
.O_name
Specifies the name of a new LV.
When unspecified, a default name of "lvol#" is
generated, where # is a number generated by LVM.
.
.TP
.O_nohints
Do not use the hints file to locate devices for PVs. A command may read
more devices to find PVs when hints are not used. The command will still
perform standard hint file invalidation where appropriate.
.
.TP
.O_nolocking
Disable locking. Use with caution, concurrent commands may produce
incorrect results.
.
.TP
.O_nosync
Causes the creation of mirror, raid1, raid4, raid5 and raid10 to skip the
initial synchronization. In case of mirror, raid1 and raid10, any data
written afterwards will be mirrored, but the original contents will not be
copied. In case of raid4 and raid5, no parity blocks will be written,
though any data written afterwards will cause parity blocks to be stored.
This is useful for skipping a potentially long and resource intensive initial
sync of an empty mirror/raid1/raid4/raid5 and raid10 LV.
This option is not valid for raid6, because raid6 relies on proper parity
(P and Q Syndromes) being created during initial synchronization in order
to reconstruct proper user data in case of device failures.
raid0 and raid0_meta do not provide any data copies or parity support
and thus do not support initial synchronization.
.
.TP
.O_noudevsync
Disables udev synchronization. The process will not wait for notification
from udev. It will continue irrespective of any possible udev processing
in the background. Only use this if udev is not running or has rules that
ignore the devices LVM creates.
.
.TP
.O_permission
Set access permission to read only \fBr\fP or read and write \fBrw\fP.
.
.TP
.O_persistent
When yes, makes the specified minor number persistent.
.
.TP
.O_pooldatavdo
Use VDO type volume for pool data volume.
.
.TP
.O_poolmetadatasize
Specifies the size of the new pool metadata LV.
.
.TP
.O_poolmetadataspare
Enable or disable the automatic creation and management of a
spare pool metadata LV in the VG. A spare metadata LV is reserved
space that can be used when repairing a pool.
.
.TP
.O_profile
An alias for --commandprofile or --metadataprofile, depending
on the command.
.
.TP
.O_quiet
Suppress output and log messages. Overrides --debug and --verbose.
Repeat once to also suppress any prompts with answer 'no'.
.
.TP
.O_raidintegrity
Enable or disable data integrity checksums for raid images.
.
.TP
.O_raidintegrityblocksize
The block size to use for dm-integrity on raid images.
The integrity block size should usually match the device
logical block size, or the file system block size.
It may be less than the file system block size, but not
less than the device logical block size.
Possible values: 512, 1024, 2048, 4096.
.
.TP
.O_raidintegritymode
Use a journal (default) or bitmap for keeping integrity checksums consistent
in case of a crash. The bitmap areas are recalculated after a crash,
so corruption in those areas would not be detected.
A journal does not have this problem.
The journal mode doubles writes to storage, but can improve performance for
scattered writes packed into a single journal write.
bitmap mode can in theory achieve full write throughput of the device,
but would not benefit from the potential scattered write optimization.
.
.TP
.O_readahead
Sets read ahead sector count of an LV.
\fBauto\fP is the default which allows the kernel to choose
a suitable value automatically.
\fBnone\fP is equivalent to zero.
.
.TP
.O_regionsize
Size of each raid or mirror synchronization region.
\fBlvm.conf\fP(5) \fBactivation/raid_region_size\fP can be used to
configure a default.
.
.TP
.O_reportformat
Overrides current output format for reports which is defined globally by
the report/output_format setting in \fBlvm.conf\fP(5).
\fBbasic\fP is the original format with columns and rows.
If there is more than one report per command, each report is prefixed
with the report name for identification. \fBjson\fP produces report
output in JSON format. \fBjson_std\fP produces report output in
JSON format which is more compliant with JSON standard.
See \fBlvmreport\fP(7) for more information.
.
.TP
.O_setactivationskip
Persistently sets (yes) or clears (no) the "activation skip" flag on an LV.
An LV with this flag set is not activated unless the
--ignoreactivationskip option is used by the activation command.
This flag is set by default on new thin snapshot LVs.
The flag is not applied to deactivation.
The current value of the flag is indicated in the lvs lv_attr bits.
.
.TP
.O_setautoactivation
Set the autoactivation property on a VG or LV.
Display the property with vgs or lvs "-o autoactivation".
When the autoactivation property is disabled, the VG or LV
will not be activated by a command doing autoactivation
(vgchange, lvchange, or pvscan using -aay.)
If autoactivation is disabled on a VG, no LVs will be autoactivated
in that VG, and the LV autoactivation property has no effect.
If autoactivation is enabled on a VG, autoactivation can be disabled
for individual LVs.
.
.TP
.O_size
Specifies the size of the new LV.
The --size and --extents options are alternate methods of specifying size.
The total number of physical extents used will be
greater when redundant data is needed for RAID levels.
.
.TP
.O_snapshot
Create a snapshot. Snapshots provide a "frozen image" of an origin LV.
The snapshot LV can be used, e.g. for backups, while the origin LV
continues to be used.
This option can create a COW (copy on write) snapshot,
or a thin snapshot (in a thin pool.)
Thin snapshots are created when the origin is a thin LV and
the size option is NOT specified. Thin snapshots share the same blocks
in the thin pool, and do not allocate new space from the VG.
Thin snapshots are created with the "activation skip" flag,
see --setactivationskip.
A thin snapshot of a non-thin "external origin" LV is created
when a thin pool is specified. Unprovisioned blocks in the thin snapshot
LV are read from the external origin LV. The external origin LV must
be read-only.
See \fBlvmthin\fP(7) for more information about LVM thin provisioning.
COW snapshots are created when a size is specified. The size is allocated
from space in the VG, and is the amount of space that can be used
for saving COW blocks as writes occur to the origin or snapshot.
The size chosen should depend upon the amount of writes that are expected;
often 20% of the origin LV is enough. If COW space runs low, it can
be extended with lvextend (shrinking is also allowed with lvreduce.)
A small amount of the COW snapshot LV size is used to track COW block
locations, so the full size is not available for COW data blocks.
Use lvs to check how much space is used, and see --monitor to
to automatically extend the size to avoid running out of space.
.
.TP
.O_stripes
Specifies the number of stripes in a striped LV. This is the number of
PVs (devices) that a striped LV is spread across. Data that
appears sequential in the LV is spread across multiple devices in units of
the stripe size (see --stripesize). This does not change existing
allocated space, but only applies to space being allocated by the command.
When creating a RAID 4/5/6 LV, this number does not include the extra
devices that are required for parity. The largest number depends on
the RAID type (raid0: 64, raid10: 32, raid4/5: 63, raid6: 62), and
when unspecified, the default depends on the RAID type
(raid0: 2, raid10: 2, raid4/5: 3, raid6: 5.)
To stripe a new raid LV across all PVs by default,
see \fBlvm.conf\fP(5) \fBallocation/raid_stripe_all_devices\fP.
.
.TP
.O_stripesize
The amount of data that is written to one device before
moving to the next in a striped LV.
.
.TP
.O_test
Run in test mode. Commands will not update metadata.
This is implemented by disabling all metadata writing but nevertheless
returning success to the calling function. This may lead to unusual
error messages in multi-stage operations if a tool relies on reading
back metadata it believes has changed but hasn't.
.
.TP
.O_thin
Specifies the command is handling a thin LV or thin pool.
See --type thin, --type thin-pool, and --virtualsize.
See \fBlvmthin\fP(7) for more information about LVM thin provisioning.
.
.TP
.O_thinpool
The name of a thin pool LV.
.
.TP
.O_type
The LV type, also known as "segment type" or "segtype".
See usage descriptions for the specific ways to use these types.
For more information about redundancy and performance
(\fBraid\fP<N>, \fBmirror\fP, \fBstriped\fP, \fBlinear\fP)
see \fBlvmraid\fP(7).
For thin provisioning (\fBthin\fP, \fBthin-pool\fP) see \fBlvmthin\fP(7).
For performance caching (\fBcache\fP, \fBcache-pool\fP) see \fBlvmcache\fP(7).
For copy-on-write snapshots (\fBsnapshot\fP) see usage definitions.
For VDO (\fBvdo\fP) see \fBlvmvdo\fP(7).
Several commands omit an explicit type option because the type
is inferred from other options or shortcuts
(e.g. --stripes, --mirrors, --snapshot, --virtualsize,
--thin, --cache, --vdo).
Use inferred types with care because it can lead to unexpected results.
.
.TP
.O_vdo
Specifies the command is handling VDO LV.
See --type vdo.
See \fBlvmvdo\fP(7) for more information about VDO usage.
.
.TP
.O_vdopool
The name of a VDO pool LV.
See \fBlvmvdo\fP(7) for more information about VDO usage.
.
.TP
.O_vdosettings
Specifies tunable VDO options for VDO LVs.
Use the form 'option=value' or 'option1=value option2=value', or
repeat --vdosettings for each option being set.
These settings override the default VDO behaviors.
To remove vdosettings and revert to the default
VDO behaviors, use --vdosettings 'default'.
See \fBlvmvdo\fP(7) for more information.
.
.TP
.O_verbose
Set verbose level. Repeat from 1 to 4 times to increase the detail
of messages sent to stdout and stderr.
.
.TP
.O_version
Display version information.
.
.TP
.O_virtualsize
The virtual size of a new thin LV.
See \fBlvmthin\fP(7) for more information about LVM thin provisioning.
Using virtual size (-V) and actual size (-L) together creates
a sparse LV.
\fBlvm.conf\fP(5) \fBglobal/sparse_segtype_default\fP determines the
default segment type used to create a sparse LV.
Anything written to a sparse LV will be returned when reading from it.
Reading from other areas of the LV will return blocks of zeros.
When using a snapshot to create a sparse LV, a hidden virtual device
is created using the zero target, and the LV has the suffix _vorigin.
Snapshots are less efficient than thin provisioning when creating
large sparse LVs (GiB).
.
.TP
.O_wipesignatures
Controls detection and subsequent wiping of signatures on new LVs.
There is a prompt for each signature detected to confirm its wiping
(unless --yes is used to override confirmations.)
When not specified, signatures are wiped whenever zeroing is done
(see --zero). This behaviour can be configured with
\fBlvm.conf\fP(5) \fBallocation/wipe_signatures_when_zeroing_new_lvs\fP.
If blkid wiping is used (\fBlvm.conf\fP(5) \fBallocation/use_blkid_wiping\fP)
and LVM is compiled with blkid wiping support, then the blkid(8)
library is used to detect the signatures (use blkid -k to list the
signatures that are recognized).
Otherwise, native LVM code is used to detect signatures
(only MD RAID, swap and LUKS signatures are detected in this case.)
The LV is not wiped if the read only flag is set.
.
.TP
.O_yes
Do not prompt for confirmation interactively but always assume the
answer yes. Use with extreme caution.
(For automatic no, see -qq.)
.
.TP
.O_zero
Controls zeroing of the first 4 KiB of data in the new LV.
Default is \fBy\fP.
Snapshot COW volumes are always zeroed.
For thin pools, this controls zeroing of provisioned blocks.
LV is not zeroed if the read only flag is set.
Warning: trying to mount an unzeroed LV can cause the system to hang.
.
.SH VARIABLES
.
.TP
.I VG
Volume Group name.  See \fBlvm\fP(8) for valid names.
For lvcreate, the required VG positional arg may be
omitted when the VG name is included in another option,
e.g. --name VG/LV.
.
.TP
.I LV
Logical Volume name.  See \fBlvm\fP(8) for valid names.
An LV positional arg generally includes the VG name and LV name, e.g. VG/LV.
LV1 indicates the LV must have a specific type, where the
accepted LV types are listed. (raid represents raid<N> type).
.
.TP
.I PV
Physical Volume name, a device path under /dev.
For commands managing physical extents, a PV positional arg
generally accepts a suffix indicating a range (or multiple ranges)
of physical extents (PEs). When the first PE is omitted, it defaults
to the start of the device, and when the last PE is omitted it defaults to end.
.br
Start and end range (inclusive):
\fIPV\fP[\fB:\fP\fIPE\fP\fB-\fP\fIPE\fP]\ .\|.\|.\&
.br
Start and length range (counting from 0):
\fIPV\fP[\fB:\fP\fIPE\fP\fB+\fP\fIPE\fP]\ .\|.\|.\&
.
.TP
.I String
See the option description for information about the string content.
.
.TP
.IR Size [UNIT]
Size is an input number that accepts an optional unit.
Input units are always treated as base two values, regardless of
capitalization, e.g. 'k' and 'K' both refer to 1024.
The default input unit is specified by letter, followed by |UNIT.
UNIT represents other possible input units:
.BR b | B
is bytes,
.BR s | S
is sectors of 512 bytes,
.BR k | K
is KiB,
.BR m | M
is MiB,
.BR g | G
is GiB,
.BR t | T
is TiB,
.BR p | P
is PiB,
.BR e | E
is EiB.
(This should not be confused with the output control --units,
where capital letters mean multiple of 1000.)
.
.SH ENVIRONMENT VARIABLES
.
See \fBlvm\fP(8) for information about environment variables used by lvm.
For example, \fBLVM_VG_NAME\fP can generally be substituted
for a required VG parameter.
.
.SH ADVANCED USAGE
.
Alternate command forms, advanced command usage,
and listing of all valid syntax for completeness.
.P
Create an LV that returns errors when used.
.P
.B lvcreate
\fB--type\fP \fBerror\fP
.O_size
\fIVG\fP
.RS
[
.O_extents
]
.br
[ COMMON_OPTIONS ]
.RE
.
.P
\(em
.P
.
Create an LV that returns zeros when read.
.P
.B lvcreate
\fB--type\fP \fBzero\fP
.O_size
\fIVG\fP
.RS
[
.O_extents
]
.br
[ COMMON_OPTIONS ]
.RE
.
.P
\(em
.P
.
Create a linear LV.
.P
.B lvcreate
\fB--type\fP \fBlinear\fP
.O_size
\fIVG\fP
.RS
[
.O_extents
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a striped LV (also see lvcreate --stripes).
.P
.B lvcreate
\fB--type\fP \fBstriped\fP
.O_size
\fIVG\fP
.RS
[
.O_extents
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a mirror LV (also see --type raid1).
.P
.B lvcreate
\fB--type\fP \fBmirror\fP
.O_size
\fIVG\fP
.RS
[
.O_extents
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_mirrors
]
.br
[
.O_regionsize
]
.br
[
.O_mirrorlog
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a COW snapshot LV of an origin LV
(also see --snapshot).
.P
.B lvcreate
\fB--type\fP \fBsnapshot\fP
.O_size
\fILV\fP
.RS
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_snapshot
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a sparse COW snapshot LV of a virtual origin LV
(also see --snapshot).
.P
.B lvcreate
\fB--type\fP \fBsnapshot\fP
.O_size
.RS
\ \&
.O_virtualsize
\fIVG\fP
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_snapshot
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a thin pool.
.P
.B lvcreate
.O_size
.O_thin
\fIVG\fP
.RS
[ \fB--type thin-pool\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_compression
]
.br
[
.O_deduplication
]
.br
[
.O_discards
]
.br
[
.O_errorwhenfull
]
.br
[
.O_pooldatavdo
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[
.O_vdosettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a thin pool named in --thinpool.
.P
.B lvcreate
\fB--thinpool\fP \fILV\fP\fI_new\fP
.O_size
\fIVG\fP
.RS
[ \fB--type thin-pool\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_thin
]
.br
[
.O_compression
]
.br
[
.O_deduplication
]
.br
[
.O_discards
]
.br
[
.O_errorwhenfull
]
.br
[
.O_pooldatavdo
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[
.O_vdosettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a cache pool named by the --cachepool arg
(variant, uses --cachepool in place of --name).
.P
.B lvcreate
\fB--cachepool\fP \fILV\fP\fI_new\fP
\fB--type\fP \fBcache-pool\fP
.RS
\ \&
.O_size
\fIVG\fP
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_cache
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_cachemetadataformat
]
.br
[
.O_cachemode
]
.br
[
.O_cachepolicy
]
.br
[
.O_cachesettings
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a thin LV in a thin pool.
.P
.B lvcreate
\fB--thinpool\fP \fILV1\fP
\fB--type\fP \fBthin\fP
.RS
\ \&
.O_virtualsize
\fIVG\fP
.br
[
.O_thin
]
.br
[ COMMON_OPTIONS ]
.sp
LV1 types:
thinpool
.RE
.
.P
\(em
.P
.
Create a thin LV in a thin pool named in the first arg
(variant, also see --thinpool for naming pool).
.P
.B lvcreate
\fB--type\fP \fBthin\fP
.O_virtualsize
\fILV1\fP
.RS
[
.O_thin
]
.br
[ COMMON_OPTIONS ]
.sp
LV1 types:
thinpool
.RE
.
.P
\(em
.P
.
Create a thin LV in the thin pool named in the first arg
(also see --thinpool for naming pool.)
.P
.B lvcreate
.O_virtualsize
\fILV1\fP
.RS
[ \fB--type thin\fP ] (implied)
.br
[
.O_thin
]
.br
[ COMMON_OPTIONS ]
.sp
LV1 types:
thinpool
.RE
.
.P
\(em
.P
.
Create a thin LV that is a snapshot of an existing thin LV.
.P
.B lvcreate
\fB--type\fP \fBthin\fP
\fILV1\fP
.RS
[
.O_snapshot
]
.br
[
.O_thin
]
.br
[ COMMON_OPTIONS ]
.sp
LV1 types:
thin
.RE
.
.P
\(em
.P
.
Create a thin LV that is a snapshot of an existing thin LV.
.P
.B lvcreate
.O_thin
\fILV1\fP
.RS
[ \fB--type thin\fP ] (implied)
.br
[
.O_snapshot
]
.br
[ COMMON_OPTIONS ]
.sp
LV1 types:
thin
.RE
.
.P
\(em
.P
.
Create a thin LV that is a snapshot of an external origin LV.
.P
.B lvcreate
\fB--thinpool\fP \fILV1\fP
.O_snapshot
\fILV\fP
.RS
[ \fB--type thin\fP ] (implied)
.br
[ COMMON_OPTIONS ]
.sp
LV1 types:
thinpool
.RE
.
.P
\(em
.P
.
Create a VDO LV with VDO pool.
.P
.B lvcreate
.O_vdo
.O_size
\fIVG\fP
.RS
[ \fB--type vdo\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_virtualsize
]
.br
[
.O_compression
]
.br
[
.O_deduplication
]
.br
[
.O_vdopool
]
.br
[
.O_vdosettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a VDO LV with VDO pool.
.P
.B lvcreate
\fB--vdopool\fP \fILV\fP\fI_new\fP
.O_size
\fIVG\fP
.RS
[ \fB--type vdo\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_virtualsize
]
.br
[
.O_compression
]
.br
[
.O_deduplication
]
.br
[
.O_vdosettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a thin LV, first creating a thin pool for it,
where the new thin pool is named by the --thinpool arg.
.P
.B lvcreate
\fB--thinpool\fP \fILV\fP\fI_new\fP
\fB--type\fP \fBthin\fP
.RS
\ \&
.O_size
.O_virtualsize
\fIVG\fP
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_thin
]
.br
[
.O_compression
]
.br
[
.O_deduplication
]
.br
[
.O_discards
]
.br
[
.O_errorwhenfull
]
.br
[
.O_pooldatavdo
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[
.O_vdosettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a thin LV, first creating a thin pool for it,
where the new thin pool is named by --thinpool.
.P
.B lvcreate
\fB--thinpool\fP \fILV\fP\fI_new\fP
.O_size
.RS
\ \&
.O_virtualsize
\fIVG\fP
.br
[ \fB--type thin\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_thin
]
.br
[
.O_compression
]
.br
[
.O_deduplication
]
.br
[
.O_discards
]
.br
[
.O_errorwhenfull
]
.br
[
.O_pooldatavdo
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[
.O_vdosettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a thin LV, first creating a thin pool for it,
where the new thin pool is named in the first arg,
or the new thin pool name is generated when the first
arg is a VG name.
.P
.B lvcreate
\fB--type\fP \fBthin\fP
.O_size
.RS
\ \&
.O_virtualsize
\fIVG\fP|\fILV\fP\fI_new\fP
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_thin
]
.br
[
.O_compression
]
.br
[
.O_deduplication
]
.br
[
.O_discards
]
.br
[
.O_errorwhenfull
]
.br
[
.O_pooldatavdo
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[
.O_vdosettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a thin LV, first creating a thin pool for it,
where the new thin pool is named in the first arg,
or the new thin pool name is generated when the first
arg is a VG name.
.P
.B lvcreate
.O_size
.O_thin
.RS
\ \&
.O_virtualsize
\fIVG\fP|\fILV\fP\fI_new\fP
.br
[ \fB--type thin\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_compression
]
.br
[
.O_deduplication
]
.br
[
.O_discards
]
.br
[
.O_errorwhenfull
]
.br
[
.O_pooldatavdo
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[
.O_vdosettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a thin LV, first creating a thin pool for it.
Create a sparse snapshot of a virtual origin LV
Chooses type thin or snapshot according to
config setting sparse_segtype_default.
.P
.B lvcreate
.O_size
.O_virtualsize
\fIVG\fP
.RS
[ \fB--type thin\fP|\fBsnapshot\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_snapshot
]
.br
[
.O_thin
]
.br
[
.O_compression
]
.br
[
.O_deduplication
]
.br
[
.O_discards
]
.br
[
.O_errorwhenfull
]
.br
[
.O_pooldatavdo
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[
.O_vdosettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
.
.P
\(em
.P
.
Create a new LV, then attach the specified cachepool
which converts the new LV to type cache.
.P
.B lvcreate
\fB--cachepool\fP \fILV1\fP
.O_size
\fIVG\fP
.RS
[ \fB--type cache\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_cache
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_cachemetadataformat
]
.br
[
.O_cachemode
]
.br
[
.O_cachepolicy
]
.br
[
.O_cachesettings
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.sp
LV1 types:
cachepool
.RE
.
.P
\(em
.P
.
Create a new LV, then attach the specified cachepool
which converts the new LV to type cache.
(variant, also use --cachepool).
.P
.B lvcreate
\fB--type\fP \fBcache\fP
.O_size
\fILV1\fP
.RS
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_cache
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_cachemetadataformat
]
.br
[
.O_cachemode
]
.br
[
.O_cachepolicy
]
.br
[
.O_cachesettings
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.sp
LV1 types:
cachepool
.RE
.
.P
\(em
.P
.
When the LV arg is a cachepool, then create a new LV and
attach the cachepool arg to it.
(variant, use --type cache and --cachepool.)
When the LV arg is not a cachepool, then create a new cachepool
and attach it to the LV arg (alternative, use lvconvert.)
.P
.B lvcreate
.O_cache
.O_size
\fILV\fP
.RS
[ \fB--type cache\fP ] (implied)
.br
[
.O_extents
]
.br
[
.O_chunksize
]
.br
[
.O_stripes
]
.br
[
.O_stripesize
]
.br
[
.O_cachemetadataformat
]
.br
[
.O_cachemode
]
.br
[
.O_cachepolicy
]
.br
[
.O_cachesettings
]
.br
[
.O_poolmetadatasize
]
.br
[
.O_poolmetadataspare
]
.br
[ COMMON_OPTIONS ]
.br
[ \fIPV\fP\ .\|.\|.\& ]
.RE
